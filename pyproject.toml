[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "lmo"
version = "0.15.0.dev0"
description = "L-Moments for robust statistics & inference."
authors = ["Joren Hammudoglu <jhammudoglu@gmail.com>"]
readme = "README.md"
license = "BSD-3-Clause"
homepage = "https://jorenham.github.io/Lmo/"
repository = "https://github.com/jorenham/Lmo/"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Education",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Hydrology",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Utilities",
    "Typing :: Typed",
]

[tool.poetry.urls]
Documentation = "https://jorenham.github.io/Lmo/"
"Bug Tracker" = "https://github.com/jorenham/Lmo/issues"

[tool.poetry.extras]
typing = ["scipy-stubs"]
pandas = ["pandas"]

[tool.poetry.dependencies]
python = "^3.11"
typing_extensions = {version = "^4.10", python = "<3.13"}

# https://numpy.org/neps/nep-0029-deprecation_policy.html
# https://scientific-python.org/specs/spec-0000/
numpy =  ">=1.24"
scipy = "^1.10"
optype = {version = "^0.6.1", extras = ["numpy"]}
scipy-stubs = {version = "^1.14.1.0", optional = true}
pandas = {version = "^2.0", optional = true}

[tool.poetry.group.dev.dependencies]
blacken-docs = "^1.19.0"
codespell = "^2.3.0"
hypothesis = {version = "^6.115.2", extras = ["numpy"]}
pre-commit = "^4.0.1"
basedpyright = "^1.18.4"
pytest = "^8.3.3"
pytest-doctestplus = "^1.2.1"
ruff = ">=0.6.9,<0.8.0"
sp-repo-review = {version = "^2024.8.19", extras = ["cli"]}
tox = "^4.22.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocs-bibtex = "^2.16.2"
mkdocs-git-revision-date-localized-plugin = "^1.2.9"
mkdocs-include-markdown-plugin = "^6.2.2"
mkdocs-jupyter = "^0.25.1"
mkdocs-material = "^9.5.41"
mkdocs-minify-plugin = "^0.8.0"
mkdocstrings = {version = ">=0.26.2,<0.27.0", extras = ["python"]}

[tool.poetry.group.debug.dependencies]
ipython = "^8.28.0"
ipykernel = "^6.29.5"
line_profiler = {version = "^4.1.3", python = "<3.13"}
matplotlib = "^3.9.2"
scipy-stubs = "*"
typing-extensions = "^4.12.2"

[tool.poetry.group.pandas.dependencies]
pandas = "*"
pandas-stubs = ">=2.0"

[tool.poetry.group.github]
optional = true
[tool.poetry.group.github.dependencies]
pytest-github-actions-annotate-failures = ">=0.2.0,<1.0"

[tool.codespell]
skip = "*.bib,*.css,*.ipynb,*.js,*.lock,*.pyc,*.svg,./site,"
context = 2

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--doctest-ignore-import-errors",
    "--strict-config",
    "--strict-markers",
]
doctest_optionflags = ["NORMALIZE_WHITESPACE", "FLOAT_CMP"]
doctest_plus = "enabled"
doctest_subpackage_requires = {"lmo/contrib/pandas.py" = "pandas>=2.0"}
filterwarnings = ["error"]
log_cli_level = "INFO"
testpaths = ["lmo", "tests"]
xfail_strict = true

[tool.pyright]
include = ["lmo", "typetests"]
exclude = ["docs", "tests"]
ignore = ["lmo/contrib/pandas.py"]
stubPath = "."
venvPath = "."
venv = ".venv"
defineConstant = {NP2 = true}
pythonVersion = "3.11"
pythonPlatform = "All"
typeCheckingMode = "strict"
enableExperimentalFeatures = true
# discouraged options
enableReachabilityAnalysis = false
enableTypeIgnoreComments = false
# for pyright compatibility
deprecateTypingAliases = true
reportMissingModuleSource = true
reportCallInDefaultInitializer = true
reportImplicitOverride = true
reportImplicitStringConcatenation = true
reportImportCycles = false  # TODO
reportMissingSuperCall = true
reportPropertyTypeMismatch = true
reportShadowedImports = true
reportUninitializedInstanceVariable = true
reportUnnecessaryTypeIgnoreComment = true
reportUnusedCallResult = false  # https://github.com/microsoft/pyright/issues/8650
reportUnreachable = false  # `if sys.version_info() >= ...`
reportAny = false  # TODO
reportIgnoreCommentWithoutRule = true
reportPrivateLocalImportUsage = true
reportImplicitRelativeImport = true
reportInvalidCast = false  # TODO
reportUnsafeMultipleInheritance = true
# already handled by ruff
reportUnusedParameter = false  # dupe of ARG002
reportUnusedImport = false  # dupe of F401
reportUnusedVariable = false  # dupe of F841

[tool.repo-review]
ignore = [
    "PC110",    # no auto-format
    "PC140",    # no mypy
    "MY",       # no mypy
    "RTD",      # no readthedocs
]

[tool.ruff]
force-exclude = true
extend-exclude = ["docs/gallery"]  # TODO
indent-width = 4
line-length = 88
show-fixes = true
src = ["lmo", "tests"]
target-version = "py311"

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"
line-ending = "lf"
preview = true
quote-style = "double"

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "DOC",      # pydoclint
    "FBT",      # flake8-boolean-trap
    "CPY",      # flake8-copyright
    "EM",       # flake8-errmsg
    "TD",       # flake8-todos
    "FIX",      # flake8-fixme
    "ERA",      # eradicate
    # pydocstyle
    "D200",     # fits-on-one-line
    "D205",     # blank-line-after-summary
    "D212",     # multi-line-summary-first-line
    # flake8-annotations
    "ANN101",   # missing-type-self (deprecated)
    "ANN102",   # missing-type-cls (deprecated)
    "ANN401",   # any-type
    # flake8-bandit
    "S101",     # assert
    # flake8-commas
    "COM812",   # missing-trailing-comma (ruff format)
    # flake8-implicit-str-concat
    "ISC001",   # single-line-implicit-string-concatenation (ruff format)
    # pylint
    "PLC0415",  # import-outside-top-level
    "PLR0904",  # too-many-arguments
    "PLR0911",  # too-many-return-statements
    "PLR0912",  # too-many-branches
    "PLR0913",  # too-many-public-methods
    "PLR0914",  # too-many-locals
    "PLR0915",  # too-many-statements
    "PLR0917",  # too-many-positional
    "PLR6301",  # no-self-use
    # ruff
    "RUF021",   # parenthesize-chained-operators
]
typing-modules = ["typing", "typing_extensions"]

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = ["D", "ANN", "I001", "T201", "N812", "N816"]
"tests/*" = ["D", "N806", "ANN", "TCH001", "TCH002", "PLC2701"]
"typetests/*" = ["D", "INP001"]

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["*_gen", "l_rv_*"]

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = [
    "typing.overload",
    "typing.override",
    "typing_extensions.overload",
    "typing_extensions.override",
]

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["lmo"]
known-third-party = ["numpy", "pandas", "scipy"]
no-lines-before = ["future", "local-folder"]
split-on-trailing-comma = false

[tool.ruff.lint.flake8-import-conventions]
banned-from = [
    "lmo.typing.np",
    "lmo.typing.scipy",
    "numpy",
    "numpy.polynomial",
    "numpy.typing",
    "optype.numpy",
]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"lmo.typing" = "lmt"
"lmo.typing.np" = "lnpt"
"lmo.typing.scipy" = "lspt"
"numpy.polynomial" = "npp"
"numpy.typing" = "npt"
"optype.numpy" = "onpt"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]
quote-annotations = true

[tool.ruff.lint.pylint]
allow-dunder-method-names = ["__array__", "__lmo_register__"]
allow-magic-value-types = ["int" ,"str"]

[tool.tox]
isolated_build = true
requires = ["tox>=4.21.2"]
env_list = ["repo-review", "pre-commit", "3.11", "3.12", "3.13"]

[tool.tox.env_run_base]
description = "test with {base_python}"
skip_install = true
allowlist_externals = ["poetry"]
commands_pre = [["poetry", "install", "--without=debug,docs"]]
commands = [["poetry", "run", "pytest"]]

[tool.tox.env.pre-commit]
description = "pre-commit"
skip_install = true
allowlist_externals = ["poetry"]
commands_pre = [["poetry", "install", "--without=debug,docs", "--extras=typing"]]
commands = [["poetry", "run", "pre-commit", "run", "--all-files"]]

[tool.tox.env.repo-review]
description = "repo-review"
skip_install = true
allowlist_externals = ["poetry"]
commands_pre = [["poetry", "install", "--without=debug,docs"]]
commands = [["poetry", "run", "repo-review", "."]]
