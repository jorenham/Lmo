[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "lmo"
version = "0.14.0"
description = "L-Moments for robust statistics & inference."
authors = ["Joren Hammudoglu <jhammudoglu@gmail.com>"]
readme = "README.md"
license = "BSD-3-Clause"
homepage = "https://jorenham.github.io/Lmo/"
repository = "https://github.com/jorenham/Lmo/"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Education",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Hydrology",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Utilities",
    "Typing :: Typed",
]

[tool.poetry.urls]
Documentation = "https://jorenham.github.io/Lmo/"
"Bug Tracker" = "https://github.com/jorenham/Lmo/issues"

[tool.poetry.dependencies]
python = ">=3.10,<3.14"
typing_extensions = {version = "^4.5", python = "<3.13"}

# https://scientific-python.org/specs/spec-0000/
numpy = ">=1.23"
scipy = ">=1.9"
pandas = {version = ">=1.5", optional = true}
optype = "^0.4.0"

[tool.poetry.group.dev.dependencies]
codespell = "^2.2.6"
hypothesis = {version = "^6.102.4", extras = ["numpy"]}
pre-commit = "^3.7.1"
pyright = "^1.1.364"
pytest = "^8.2.1"
pytest-doctestplus = "^1.2.1"
ruff = "^0.4.5"
tomli = {version = "^2.0.1", python = "<3.11"}

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.24"
mkdocs-include-markdown-plugin = "^6.0.6"
mkdocstrings = {version = "^0.25.1", extras = ["python"]}
mkdocs-git-revision-date-localized-plugin = "^1.2.5"
mkdocs-minify-plugin = "^0.8.0"

[tool.poetry.group.debug.dependencies]
ipython = "^8.24.0"
ipykernel = "^6.29.4"
matplotlib = "^3.9.0"
typing-extensions = "^4.11.0"

[tool.poetry.group.pandas.dependencies]
pandas = "*"
pandas-stubs = ">=1.5"

[tool.poetry.group.github]
optional = true
[tool.poetry.group.github.dependencies]
pytest-github-actions-annotate-failures = ">=0.2.0,<1.0"

[tool.poetry.group.numpy1]
optional = true
[tool.poetry.group.numpy1.dependencies]
numpy = "<=2"

[tool.poetry.group.numpy2]
optional = true
[tool.poetry.group.numpy2.dependencies]
numpy = {version = ">=2.0.0rc2", allow-prereleases = true}
scipy = ">=1.13.1"

[tool.poetry.extras]
pandas = ["pandas"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--doctest-ignore-import-errors",
    "--strict-config",
    "--strict-markers",
]
doctest_optionflags = [
    "NORMALIZE_WHITESPACE",
    "FLOAT_CMP",
]
doctest_plus = "enabled"
doctest_subpackage_requires = {"lmo/contrib/pandas.py" = "pandas>=1.5"}
filterwarnings = ["error"]
log_cli_level = "INFO"
testpaths = ["tests", "lmo"]
xfail_strict = true


[tool.pyright]
include = ["lmo"]
exclude = [
    "**/__pycache__",
    ".git",
    ".github",
    ".hypothesis",
    ".pytest_cache",
    ".ruff_cache",
    ".vscode",
    "dist",
    "docs",
    "site",
    "tests",
]
ignore = [
    "lmo/contrib/pandas.py",
]
defineConstant = { NP_V2 = true }
stubPath = 'typings'
venvPath = "."
venv = ".venv"
pythonVersion = "3.10"
pythonPlatform = "All"
typeCheckingMode = "strict"

useLibraryCodeForTypes = true
reportMissingTypeStubs = false

reportCallInDefaultInitializer = true
reportImplicitOverride = false
reportImplicitStringConcatenation = true
reportImportCycles = false
reportPropertyTypeMismatch = true
reportShadowedImports = true
reportUninitializedInstanceVariable = true
reportUnnecessaryTypeIgnoreComment = true
reportUnusedCallResult = true


[tool.ruff]
src = ["lmo", "tests"]
target-version = "py310"
line-length = 79
indent-width = 4
show-fixes = true
force-exclude = true
extend-exclude = [
    ".github",
    ".hypothesis",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "dist",
    "docs",
    "site",
]

[tool.ruff.lint]
preview = true
select = [
    "F",        # pyflakes
    "E",        # pycodestyle error
    "W",        # pycodestyle warning
    "C90",      # mccabe
    "I",        # isort
    "N",        # pep8-naming
    "D",        # pydocstyle
    "UP",       # pyupgrade
    "YTT",      # flake8-2020
    "ANN",      # flake8-annotations
    "BLE",      # flake8-blind-except
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "COM",      # flake8-commas
    "C4",       # flake8-comprehensions
    "DTZ",      # flake8-datetimez
    "T10",      # flake8-debugger
    "EXE",      # flake8-executable
    "FA",       # flake8-future-annotations
    "ISC",      # flake8-implicit-str-concat
    "ICN",      # flake8-import-conventions
    "INP",      # flake8-no-pep420
    "LOG",      # flake8-logging
    "G",        # flake8-logging-format
    "PIE",      # flake8-pie
    "T20",      # flake8-print
    "PYI",      # flake8-pyi
    "PT",       # flake8-pytest-style
    "Q",        # flake8-quotes
    "RSE",      # flake8-raise
    "RET",      # flake8-return
    "SLF",      # flake8-self
    "SLOT",     # flake8-slots
    "SIM",      # flake8-simplify
    "TID",      # flake8-tidy-imports
    "TCH",      # flake8-type-checking
    "ARG",      # flake8-unused-arguments
    "PTH",      # flake8-use-pathlib
    "TD",       # flake8-todos
    "PD",       # pandas-vet
    "PGH",      # pygrep-hooks
    "PL",       # pylint
    "TRY",      # tryceratops
    "FLY",      # flynt
    "NPY",      # NumPy-specific rules
    "PERF",     # perflint,
    "FURB",     # refurb
    "RUF",      # ruff
]
ignore = [
    # pydocstyle
    "D200",     # fits-on-one-line
    "D205",     # blank-line-after-summary
    "D212",     # multi-line-summary-first-line

    # flake8-annotations
    "ANN101",   # missing-type-self (deprecated)
    "ANN102",   # missing-type-cls (deprecated)
    "ANN401",   # any-type

    # pylint
    "PLC0415",  # import-outside-top-level
    "PLR0904",  # too-many-arguments
    "PLR0911",  # too-many-return-statements
    "PLR0912",  # too-many-branches
    "PLR0913",  # too-many-public-methods
    "PLR0914",  # too-many-locals
    "PLR0915",  # too-many-statements
    "PLR0917",  # too-many-positional
    "PLR6301",  # no-self-use

    # ruff
    "RUF021",   # parenthesize-chained-operators
    "RUF022",   # unsorted-dunder-all
]
typing-modules = [
    "lmo.typing",
    "numpy.typing",
    "typing_extensions",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "N806", "ANN", "PLC2701"]
"typetests/*" = ["D", "INP001"]

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["*_gen", "l_rv_*"]

[tool.ruff.lint.pycodestyle]
max-line-length = 79

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = [
    "typing.overload",
    "typing.override",
    "typing_extensions.override",
]

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["lmo"]
known-third-party = ["numpy", "pandas", "scipy"]
lines-after-imports = 2
lines-between-types = 0
no-lines-before = ["future", "local-folder"]
split-on-trailing-comma = false

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.pylint]
allow-dunder-method-names = [
    "__array__",
    "__array_ufunc__",
    "__lmo_register__",
]
allow-magic-value-types = ["int"]

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"
line-ending = "lf"
quote-style = "single"
skip-magic-trailing-comma = true
exclude = ["typing.py"]


[tool.codespell]
skip = """\
    ./.git,\
    ./.github,\
    ./.hypothesis,\
    ./.pytest_cache,\
    ./.ruff_cache,\
    ./.venv,\
    ./.vscode,\
    ./dist,\
    ./site,\
    *.lock,\
    *.pyc,\
    *.js,\
    *.css,\
    *.svg,\
    *.png,\
    *.ico,\
    *.ipynb\
"""
context = 2


[tool.yapf]
based_on_style = 'pep8'

align_closing_bracket_with_visual_indent = false
blank_lines_around_top_level_definition = 1
blank_line_before_nested_class_or_def = false
blank_lines_between_top_level_imports_and_variables = 2
coalesce_brackets = true
continuation_align_style = 'space'
dedent_closing_brackets = true
force_multiline_dict = true
indent_dictionary_value = true
spaces_around_power_operator = true
split_all_top_level_comma_separated_values = true
split_arguments_when_comma_terminated = true
split_before_arithmetic_operator = true
split_before_dot = true
split_before_expression_after_opening_paren = true
split_before_first_argument = true
split_complex_comprehension = true
