[build-system]
requires = ["poetry-core", "oldest-supported-numpy"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "lmo"
version = "0.11.0"
description = "L-Moments for robust statistics."
authors = ["Joren Hammudoglu <jhammudoglu@gmail.com>"]
readme = "README.md"
license = "BSD-3-Clause"
homepage = "https://jorenham.github.io/lmo/"
repository = "https://github.com/jorenham/lmo/"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
    "Topic :: Utilities",
    "Typing :: Typed",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.urls]
Documentation = "https://jorenham.github.io/lmo/"
"Bug Tracker" = "https://github.com/jorenham/lmo/issues"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
typing_extensions = { version = "^4.1", python = "<3.11"}
numpy = "^1.22.4"
scipy = "^1.9"
pandas = { version = ">=1.4", optional = true }

[tool.poetry.group.dev.dependencies]
pytest = "^7.4"
hypothesis = { extras = ["numpy"], version = "^6.88" }
pyright = "^1.1"
ruff = ">=0.1.3,<1.0"
codespell = "^2.2"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5"
mkdocs-material = "^9.4"
mkdocs-include-markdown-plugin = "^6.0"
mkdocstrings = {extras = ["python"], version = ">=0.23,<1.0"}

[tool.poetry.group.debug.dependencies]
ipython = "^8.16"
ipykernel = "^6.25"
matplotlib = "^3.8"
line-profiler = "^4.1"

[tool.poetry.group.pandas.dependencies]
pandas = ">=1.4"
pandas-stubs = ">=1.4"

[tool.poetry.extras]
pandas = ["pandas"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--exitfirst",
    "--import-mode=importlib",
    "--showlocals",
    "--strict-markers",
    "--strict-config",
    "--doctest-modules",
    "--doctest-ignore-import-errors",
]
doctest_optionflags = [
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
    "ELLIPSIS",
]
xfail_strict = true
filterwarnings = [
    "error",
    # https://github.com/dateutil/dateutil/issues/1314
    "ignore::DeprecationWarning:dateutil",
]
log_cli_level = "info"
testpaths = ["tests", "lmo"]


[tool.pyright]
include = ["lmo"]
exclude = [
    "**/__pycache__",
    "**/.pytest_cache",
    "**/.hypothesis",
    "**/.pytest_cache",
    "**/.ruff_cache",
    "**/.vscode",
    ".git",
    ".github",
    "dist",
    "docs",
    "site",
    "tests",
]
ignore = [
    # TODO: figure out how to do this conditionally
    "lmo/contrib/pandas.py",
]
venv = ".venv"
pythonVersion = "3.10"
pythonPlatform = "All"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true


[tool.ruff]
target-version = "py310"
src = ["lmo"]
extend-exclude = ["tests"]
line-length = 79
select = [
    "F",    # pyflakes
    "E",    # pycodestyle error
    "W",    # pycodestyle warning
    "C90",  # mccabe
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "BLE",  # flake8-blind-except
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "TD",   # flake8-todos
    "PD",   # pandas-vet
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # NumPy-specific rules
    "PERF", # perflint,
    # "FURB", # refurb
    "RUF",  # Ruff-specific rules
]
ignore = [
    "D205", # blank-line-after-summary
    "D212", # multi-line-summary-first-line
    "B023", # function-uses-loop-variable
]

[tool.ruff.format]
exclude = [
    "lmo/__init__.py",
    "lmo/typing.py",
]
quote-style = "single"

[tool.ruff.pydocstyle]
convention = "google"
ignore-decorators = [
    "typing.overload",
]

[tool.ruff.isort]
case-sensitive = true
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.flake8-quotes]
inline-quotes = "single"

[tool.codespell]
skip = '*.lock,.venv,.vscode,dist,docs,site'
context = 2
